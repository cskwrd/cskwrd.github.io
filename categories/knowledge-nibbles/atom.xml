<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>A Blog - Knowledge Nibbles</title>
    <subtitle>Where curiosity crashes into technology, well, programming most of the time.</subtitle>
    <link rel="self" type="application/atom+xml" href="https://cskwrd.github.io/categories/knowledge-nibbles/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://cskwrd.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-08-01T00:00:00+00:00</updated>
    <id>https://cskwrd.github.io/categories/knowledge-nibbles/atom.xml</id>
    <entry xml:lang="en">
        <title>RISC-V: The New Kid on a Chip</title>
        <published>2023-08-01T00:00:00+00:00</published>
        <updated>2023-08-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://cskwrd.github.io/blog/posts/risc-v-new-kid-on-a-chip/"/>
        <id>https://cskwrd.github.io/blog/posts/risc-v-new-kid-on-a-chip/</id>
        
        <content type="html" xml:base="https://cskwrd.github.io/blog/posts/risc-v-new-kid-on-a-chip/">&lt;p&gt;RISC-V is a new instruction set architecture (&lt;abbr&gt;ISA&lt;&#x2F;abbr&gt;). To be extremely accurate, RISC-V is a &lt;em&gt;family&lt;&#x2F;em&gt; of ISAs, but it is common to refer to them as &lt;em&gt;the&lt;&#x2F;em&gt; RISC-V ISA. An ISA specifies the behaviors a given CPU manufacturer&#x27;s processor implementation must exhibit in order to maintain binary compatibility with other implementations. To more easily reason and speak about ISAs, they are often given a classification. The seemingly most common classification being the architectural complexity, or more simply put, how many instructions are included in the specification. Using this form of classification, an ISA falls into one of two categories:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Complex instruction set computers (&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Complex_instruction_set_computer&quot;&gt;CISC&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Reduced instruction set computers (&lt;a rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Reduced_instruction_set_computer&quot;&gt;RISC&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are a variety of different ISAs in existence. Well-known ISAs include &lt;code&gt;x86&lt;&#x2F;code&gt; (CISC, commonly used by AMD and Intel), and &lt;code&gt;arm&lt;&#x2F;code&gt; (RISC, commonly used by Apple and Google).&lt;&#x2F;p&gt;
&lt;p&gt;RISC-V differentiates itself from many other ISAs through its modular design. The modularity of RISC-V&#x27;s design allows for several base integer ISA variants and numerous optional extensions. The combination of these bases and extensions allow for implementations  supporting embedded systems all the way up to supercomputer&#x27;s with giant 128 bit address spaces.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-big-happy-risc-v-isa-family-aww-man-woman-girl-boy&quot;&gt;The Big, Happy, RISC-V ISA Family (Aww! üë®‚Äçüë©‚Äçüëß‚Äçüë¶)&lt;&#x2F;h2&gt;
&lt;p&gt;From its name, it is obvious that the RISC-V ISA is classified as a &lt;code&gt;RISC&lt;&#x2F;code&gt; ISA. What may not be immediately obvious is that it&#x27;s what&#x27;s known as a &lt;em&gt;load-store&lt;&#x2F;em&gt; architecture. This means that the instructions fit into two categories:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Memory access&lt;&#x2F;li&gt;
&lt;li&gt;ALU operations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This means that the operands for a given instruction either both operate on registers, or they operate on memory. This is in contrast to many &lt;code&gt;CISC&lt;&#x2F;code&gt; ISAs (like &lt;code&gt;x86&lt;&#x2F;code&gt;) that are known as &lt;em&gt;register-memory&lt;&#x2F;em&gt; architectures, where any one operand of a given instruction may operate on memory or a register.&lt;&#x2F;p&gt;
&lt;p&gt;The RISC-V ISA defines several base integer (four, at the time of writing, to be exact) ISAs. The two primary ISAs are the 32-bit integer (&lt;abbr&gt;RV32I&lt;&#x2F;abbr&gt;) variant and the 64-bit integer (&lt;abbr&gt;RV64I&lt;&#x2F;abbr&gt;) variant. One of these base ISAs must be present in any valid implementation. It is important to note that the RV32I variant is not a strict super set of the RV64I variant. This decision was made consciously to allow implementors to make optimizations as needed to meet any memory or power constraints. This is also the reason that so many optional extensions exist. These extensions range from multiplication or floating-point arithmetic to compressed instructions to bit manipulation.&lt;&#x2F;p&gt;
&lt;p&gt;RISC-V CPU implementations that are meant to be suitable for general purpose computing generally implement the extensions &lt;code&gt;I&lt;&#x2F;code&gt;, &lt;code&gt;M&lt;&#x2F;code&gt;, &lt;code&gt;A&lt;&#x2F;code&gt;, &lt;code&gt;F&lt;&#x2F;code&gt;, &lt;code&gt;D&lt;&#x2F;code&gt;, &lt;code&gt;Zicsr&lt;&#x2F;code&gt;, &lt;code&gt;Zifencei&lt;&#x2F;code&gt;, and &lt;code&gt;C&lt;&#x2F;code&gt;. This set of extensions are so commonly implemented that they are denoted as &lt;code&gt;RV32GC&lt;&#x2F;code&gt; and &lt;code&gt;RV64GC&lt;&#x2F;code&gt; for 32 and 64 bits respectively.&lt;&#x2F;p&gt;
&lt;p&gt;There is one more member in the RISC-V family. The privileged ISA. This ISA covers &amp;quot;all aspects of RISC-V systems beyond the unprivileged ISA, including privileged instructions as well as additional
functionality required for running operating systems and attaching external devices.&amp;quot; The privileged ISA outlines the instructions needed to support operating systems and hypervisors, not just running applications on bare metal.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have any thoughts or questions about this post, feel free to start a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cskwrd&#x2F;cskwrd.github.io&#x2F;discussions&quot;&gt;discussion&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
</feed>
