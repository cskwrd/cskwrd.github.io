<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="feed/pretty-atom-feed.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>BlogFax</title>
  <subtitle>Where curiosity crashes into technology, well, programming most of the time.</subtitle>
  <link href="https://cskwrd.github.io/eleventy-base-blog/blog/feed.xml" rel="self" />
  <link href="https://cskwrd.github.io/eleventy-base-blog/" />
  <updated>2024-05-04T00:00:00Z</updated>
  <id>https://cskwrd.github.io/eleventy-base-blog/</id>
  <author>
    <name>cskwrd</name>
  </author>
  <entry>
    <title>Still Here!</title>
    <link href="https://cskwrd.github.io/eleventy-base-blog/blog/posts/still-here/" />
    <updated>2024-05-04T00:00:00Z</updated>
    <id>https://cskwrd.github.io/eleventy-base-blog/blog/posts/still-here/</id>
    <content type="html">&lt;p&gt;Still here! Sorry, this padawan needed to do some more learning... Hopefully, there will be more posts this year. I am also planning to clean up the theme a bit as well.&lt;/p&gt;
&lt;p&gt;May the fourth be with you!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>RISC-V: The New Kid on the Chip</title>
    <link href="https://cskwrd.github.io/eleventy-base-blog/blog/posts/risc-v-new-kid-on-the-chip/" />
    <updated>2023-08-01T00:00:00Z</updated>
    <id>https://cskwrd.github.io/eleventy-base-blog/blog/posts/risc-v-new-kid-on-the-chip/</id>
    <content type="html">&lt;p&gt;RISC-V is a new instruction set architecture (&lt;abbr&gt;ISA&lt;/abbr&gt;). To be extremely accurate, RISC-V is a &lt;em&gt;family&lt;/em&gt; of ISAs, but it is common to refer to them as &lt;em&gt;the&lt;/em&gt; RISC-V ISA. An ISA specifies the behaviors a given CPU manufacturer&#39;s processor implementation must exhibit in order to maintain binary compatibility with other implementations. To more easily reason and speak about ISAs, they are often given a classification. The seemingly most common classification being the architectural complexity, or more simply put, how many instructions are included in the specification. Using this form of classification, an ISA falls into one of two categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Complex instruction set computers (&lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_instruction_set_computer&quot;&gt;CISC&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Reduced instruction set computers (&lt;a href=&quot;https://en.wikipedia.org/wiki/Reduced_instruction_set_computer&quot;&gt;RISC&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a variety of different ISAs in existence. Well-known ISAs include &lt;code&gt;x86&lt;/code&gt; (CISC, commonly used by AMD and Intel), and &lt;code&gt;arm&lt;/code&gt; (RISC, commonly used by Apple and Google).&lt;/p&gt;
&lt;p&gt;RISC-V differentiates itself from many other ISAs through its modular design. The modularity of RISC-V&#39;s design allows for several base integer ISA variants and numerous optional extensions. The combination of these bases and extensions allow for implementations  supporting embedded systems all the way up to supercomputer&#39;s with giant 128 bit address spaces.&lt;/p&gt;
&lt;h2 id=&quot;the-big-happy-risc-v-isa-family-aww&quot;&gt;The Big, Happy, RISC-V ISA Family (Aww!)&lt;/h2&gt;
&lt;p&gt;From its name, it is obvious that the RISC-V ISA is classified as a &lt;code&gt;RISC&lt;/code&gt; ISA. What may not be immediately obvious is that it&#39;s what&#39;s known as a &lt;em&gt;load-store&lt;/em&gt; architecture. This means that the instructions fit into two categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Memory access&lt;/li&gt;
&lt;li&gt;ALU operations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means that the operands for a given instruction either both operate on registers, or they operate on memory. This is in contrast to many &lt;code&gt;CISC&lt;/code&gt; ISAs (like &lt;code&gt;x86&lt;/code&gt;) that are known as &lt;em&gt;register-memory&lt;/em&gt; architectures, where any one operand of a given instruction may operate on memory or a register.&lt;/p&gt;
&lt;p&gt;The RISC-V ISA defines several base integer (four, at the time of writing, to be exact) ISAs. The two primary ISAs are the 32-bit integer (&lt;abbr&gt;RV32I&lt;/abbr&gt;) variant and the 64-bit integer (&lt;abbr&gt;RV64I&lt;/abbr&gt;) variant. One of these base ISAs must be present in any valid implementation. It is important to note that the RV32I variant is not a strict super set of the RV64I variant. This decision was made consciously to allow implementors to make optimizations as needed to meet any memory or power constraints. This is also the reason that so many optional extensions exist. These extensions range from multiplication or floating-point arithmetic to compressed instructions to bit manipulation.&lt;/p&gt;
&lt;p&gt;RISC-V CPU implementations that are meant to be suitable for general purpose computing generally implement the extensions &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;M&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt;, &lt;code&gt;Zicsr&lt;/code&gt;, &lt;code&gt;Zifencei&lt;/code&gt;, and &lt;code&gt;C&lt;/code&gt;. This set of extensions are so commonly implemented that they are denoted as &lt;code&gt;RV32GC&lt;/code&gt; and &lt;code&gt;RV64GC&lt;/code&gt; for 32 and 64 bits respectively.&lt;/p&gt;
&lt;p&gt;There is one more member in the RISC-V family. The privileged ISA. This ISA covers &amp;quot;all aspects of RISC-V systems beyond the unprivileged ISA, including privileged instructions as well as additional
functionality required for running operating systems and attaching external devices.&amp;quot; The privileged ISA outlines the instructions needed to support operating systems and hypervisors, not just running applications on bare metal.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have any thoughts or questions about this post, feel free to start a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https://github.com/cskwrd/cskwrd.github.io/discussions&quot;&gt;discussion&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>How to Build a Train Station One VPN at a Time</title>
    <link href="https://cskwrd.github.io/eleventy-base-blog/blog/posts/vpn-on-a-train/" />
    <updated>2023-07-01T00:00:00Z</updated>
    <id>https://cskwrd.github.io/eleventy-base-blog/blog/posts/vpn-on-a-train/</id>
    <content type="html">&lt;p&gt;Like most of us in the software industry, I have a home lab set up at, well, home. In my lab I run various web services and tools for fun, for family, to learn, or for their utility. To save time and ensure my sanity in some cases, I use tools like Ansible, Docker, and in some cases even K3s. Today I am going to walk through installing &lt;a href=&quot;https://www.flatcar.org/&quot;&gt;Flatcar Container Linux&lt;/a&gt; on a bare metal VPS, then configuring a WireGuard VPN server.&lt;/p&gt;
&lt;h2 id=&quot;things-you-ll-need&quot;&gt;Things You&#39;ll Need&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A bare metal VPS
&lt;ul&gt;
&lt;li&gt;This isn&#39;t a hard requirement, but this post is written with the assumption that you are using &lt;s&gt;someone else&#39;s computer&lt;/s&gt; the ☁️.&lt;br&gt;
(I use this &lt;a href=&quot;https://cloudfanatic.net/crm/aff.php?aff=582&quot;&gt;&lt;strong&gt;&lt;em&gt;SUPER&lt;/em&gt;&lt;/strong&gt; cheap US host&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flatcar Container Linux Installation Media
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stable.release.flatcar-linux.net/amd64-usr/current/&quot;&gt;amd64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stable.release.flatcar-linux.net/arm64-usr/current/&quot;&gt;arm64&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;pouring-the-foundation&quot;&gt;Pouring the Foundation&lt;/h2&gt;
&lt;p&gt;If you haven&#39;t worked with Flatcar Container Linux before, it will feel somewhat awkward. The strangest aspect of the distro is its lack of package manager. This is by design and actually what makes it rather nice to work with in the end. The only tools we will have at our disposal will be those need to run containers, and the idea is that anything else we need will come from a container.&lt;/p&gt;
&lt;p&gt;As I mentioned, the idea behind Flatcar Container Linux is that all your dependencies come from containers. This affords us a unique opportunity to leverage this fact and provide all of our host during the installation process. There will be no installing tools or backing up configurations before we make changes. At this point, I would like to note that because VPS providers differ in the exact way in which they handle booting the OS installation media, I won&#39;t cover that particular aspect. I refer you to your provider&#39;s knowledge base and/or helpdesk.&lt;/p&gt;
&lt;p&gt;Once we have booted the installation media, we can begin prepping the installation. To do this, we will be using the &lt;a href=&quot;https://www.flatcar.org/docs/latest/provisioning/config-transpiler/configuration/&quot;&gt;butane configuration specification&lt;/a&gt; along with the &lt;a href=&quot;https://quay.io/repository/coreos/butane?tab=tags&amp;amp;tag=latest&quot;&gt;butane config transpiler&lt;/a&gt; container to create our host configuration. My VPS provider&#39;s interface to the live environment we are currently using, doesn&#39;t support copy and paste actions very well, so I will first create my configuration locally using a text editor and then transfer it to the VPS. If you prefer to work directly in the live environment, that is perfectly fine, as the &lt;code&gt;vim&lt;/code&gt; editor is available. Copy the following butane config into your editor.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flatcar
&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1.0.0
&lt;span class=&quot;token key atrule&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# Set hostname&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /etc/hostname
      &lt;span class=&quot;token key atrule&quot;&gt;overwrite&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0644&lt;/span&gt;      
      &lt;span class=&quot;token key atrule&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; train&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;station
    &lt;span class=&quot;token comment&quot;&gt;# Update sshd options, https://www.flatcar.org/docs/latest/setup/security/customizing-sshd/#customizing-sshd-with-a-butane-config&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /etc/ssh/sshd_config
      &lt;span class=&quot;token key atrule&quot;&gt;overwrite&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0600&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
          # Use most defaults for sshd configuration.
          UsePrivilegeSeparation sandbox
          Subsystem sftp internal-sftp
          UseDNS no&lt;/span&gt;

          PermitRootLogin no
          AllowUsers core
          AuthenticationMethods publickey
    &lt;span class=&quot;token comment&quot;&gt;# Flatcar Container Linux doesn&#39;t set any firewall rules by default, so we define some here&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# These rules start by blocking all incoming traffic and allowing all outgoing traffic&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# Then loopback traffic is allowed&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# Next existing connections are allowed, followed by allowing (incoming) traffic on port 22 (SSH)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# Finally various types of ICMP traffic is allowed, this traffic is useful for troubleshooting&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /var/lib/iptables/rules&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;save
      &lt;span class=&quot;token key atrule&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0644&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; root
      &lt;span class=&quot;token key atrule&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; root
      &lt;span class=&quot;token key atrule&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
          *filter
          :INPUT DROP [0:0]
          :FORWARD DROP [0:0]
          :OUTPUT ACCEPT [0:0]
          -A INPUT -i lo -j ACCEPT
          -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
          -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
          -A INPUT -p icmp -m icmp --icmp-type echo-reply -j ACCEPT
          -A INPUT -p icmp -m icmp --icmp-type destination-unreachable -j ACCEPT
          -A INPUT -p icmp -m icmp --icmp-type echo-request -j ACCEPT
          -A INPUT -p icmp -m icmp --icmp-type time-exceeded -j ACCEPT
          COMMIT&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;systemd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;units&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# Ensure that our default firewall rules are read in at boot time&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; iptables&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;restore.service
      &lt;span class=&quot;token key atrule&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# Ensure Docker starts automatically instead of being only socket-activated&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; docker.service
      &lt;span class=&quot;token key atrule&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;passwd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# This is the default user in a Flatcar Container Linux installation&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; core
      &lt;span class=&quot;token key atrule&quot;&gt;ssh_authorized_keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# A list of public keys you wish to use for key auth go here&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; ssh&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINZCBaBv4Pel8Xf6aBhufccXj2x+R2il7Jri1hICHkHk cskwrd@blog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don&#39;t forget to update the &lt;code&gt;ssh_authorized_keys&lt;/code&gt; authorized with the correct keys. After the installation process has completed, the only way to log in will be via SSH. Additionally, you can update the hostname to something more suitable for you.
After you are finished modifying the file, save it. I chose to save mine as &lt;code&gt;train-station.bu&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With a butane config in hand, it is time to transpile it into an ignition config. This process is straight forward, and can be done using the following one-liner: &lt;code&gt;cat train-station.bu | docker run --rm -i quay.io/coreos/butane:latest &amp;gt; train-station.ign&lt;/code&gt;. It should take less than a minute to complete successfully. At this point, if you have been working locally, you need to transfer the &lt;code&gt;train-station.ign&lt;/code&gt; ignition config to the VPS. I did this by copying the config using &lt;code&gt;scp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The last step of the installation process is almost as simple as a single command. We just need to look up one last piece of information, the path to the disk we want to use. We will use &lt;code&gt;lsblk&lt;/code&gt; to help us in our quest for a disk path.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ lsblk
NAME    MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINTS
sr0      &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;:0    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;   353M  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; rom
vda     &lt;span class=&quot;token number&quot;&gt;253&lt;/span&gt;:0    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;   200G  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; disk
`-vda1  &lt;span class=&quot;token number&quot;&gt;253&lt;/span&gt;:1    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;197&lt;/span&gt;.7G  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; part  /&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your output will likely be a tad different, but you are looking for a line item of &lt;code&gt;TYPE&lt;/code&gt; &lt;code&gt;disk&lt;/code&gt; and a &lt;code&gt;SIZE&lt;/code&gt; that matches the disk size you want to install the OS on. In the output above, the path I want is &lt;code&gt;/dev/vda&lt;/code&gt;. With the disk path in hand, it is time to execute the installer. To do this, we invoke &lt;code&gt;sudo flatcar-install -d /dev/vda -i ./train-station.ign&lt;/code&gt;. The process doesn&#39;t take long to complete. Once the installation is complete, reboot and be sure that you are now running from the disk and not the installation media. An easy test can be performed by attempting to connect via SSH, if that succeeds you can move on to Docker and WireGuard, otherwise do a quick cry and repeat the process outlined above.&lt;/p&gt;
&lt;h2 id=&quot;building-the-rest-of-the-station&quot;&gt;Building the Rest of the Station&lt;/h2&gt;
&lt;p&gt;From here on we will move pretty quick. We will use the &lt;a href=&quot;https://docs.linuxserver.io/images/docker-wireguard&quot;&gt;linuxserver/wireguard&lt;/a&gt; container for our WireGuard server. To get started, save the following Compose file somewhere your local Docker client can access with the name &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3.4&#39;&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;wgnet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; wgnet
    &lt;span class=&quot;token key atrule&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bridge
    &lt;span class=&quot;token key atrule&quot;&gt;ipam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;token key atrule&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;subnet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10.123.0.0/16
         &lt;span class=&quot;token key atrule&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10.123.0.1

&lt;span class=&quot;token key atrule&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;wireguard&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; lscr.io/linuxserver/wireguard&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;latest
    &lt;span class=&quot;token key atrule&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; wireguard
    &lt;span class=&quot;token key atrule&quot;&gt;cap_add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; NET_ADMIN
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; SYS_MODULE
    &lt;span class=&quot;token key atrule&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; PUID=$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;PUID&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;UID required&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; PGID=$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;PGID&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;GID required&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; TZ=$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;TZ&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;Etc/UTC&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; SERVERURL=$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;WG_SERVER_URL&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;WireGuard server URL required&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; SERVERPORT=$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;WG_SERVER_PORT&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;-51820&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; PEERS=$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;WG_PEER_LIST&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;WireGuard peer list required&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; PEERDNS=1.1.1.1
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; INTERNAL_SUBNET=$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;WG_INTERNAL_SUBNET&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;WireGuard subnet required&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; ALLOWEDIPS=0.0.0.0/0
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; PERSISTENTKEEPALIVE_PEERS=$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;WG_PKA_PEER_LIST&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; LOG_CONFS=true &lt;span class=&quot;token comment&quot;&gt;# log client config to logs as QR codes&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; wgnet
    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; wg&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/config
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; /lib/modules&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/lib/modules
    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;${WG_SERVER_PORT:-51820}:51820/udp&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;sysctls&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; net.ipv4.conf.all.src_valid_mark=1

&lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;wg-data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After saving any modification need to fit your network, save a new file named &lt;code&gt;.env&lt;/code&gt; in the same directory as the compose file with the following contents.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# General linuxserver.io env vars
PGID=500
PUID=500

# Required WireGuard container env vars
WG_PEER_LIST=thomas,emily
WG_INTERNAL_SUBNET=10.210.0.0
WG_PKA_PEER_LIST=

# Optional WireGuard container env variables
#WG_SERVER_PORT=43210

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;.env&lt;/code&gt; file will be parsed when we invoke the &lt;code&gt;docker compose&lt;/code&gt; command and the variable values will be injected into the resulting compose spec. Double-check the values in the &lt;code&gt;.env&lt;/code&gt; file and invoke &lt;code&gt;docker compose -H ssh://core@&amp;lt;train-station-ip&amp;gt; -f docker-compose.yml up -d&lt;/code&gt;. Here we use the &lt;code&gt;-H&lt;/code&gt; flag to set the Docker endpoint to use. This will securely wrap all communication between the Docker daemon on the VPS and the Docker client we have installed locally. If this is the first time you have made an SSH connection to your VPS, the invocation will fail because the VPS&#39;s host key has not yet been trusted yet. The easiest way to fix the issue is to connect to the VPS of SSH before invoking the &lt;code&gt;docker compose&lt;/code&gt; command. Now it&#39;s time for the grand opening of this &lt;a href=&quot;https://en.wikipedia.org/wiki/Shining_Time_Station&quot;&gt;shining time station&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id=&quot;open-for-business&quot;&gt;Open for Business&lt;/h2&gt;
&lt;p&gt;Now that we have the operating system installed and the WireGuard server running in a container, we can begin to enjoy the fruits of our labor. My primary WireGuard use case is connecting back to services in my home lab from my phone while on the move. That sort of configuration is worthy of a post by itself, so for now we&#39;ll focus on getting an Android phone connected. The maintainers of the WireGuard project have really put in some work on this app. Start by opening the app and tapping the add button. Tap the &lt;code&gt;Scan from QR code&lt;/code&gt; option. In your terminal, invoke the following &lt;code&gt;docker -H ssh://core@&amp;lt;train-station-ip&amp;gt; logs wireguard&lt;/code&gt; and you should see a few QR codes (the config above configures 2 peers). Scan the code for &lt;code&gt;peer_thomas&lt;/code&gt;. After a successful scan, you are prompted to name the tunnel. Keeping with the post&#39;s theme, I named the tunnel &lt;code&gt;train-station&lt;/code&gt;. Finally, activate the tunnel by tapping the toggle button.&lt;/p&gt;
&lt;h2 id=&quot;next-stop-web-scale&quot;&gt;Next Stop, WEB SCALE!&lt;/h2&gt;
&lt;p&gt;Not really, this setup isn&#39;t built for that! As I stated before, the plan is to make some of my self-hosted services available over WireGuard, but that&#39;s a post for a different day. Thanks for reading!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>My Automatic Resume Engine</title>
    <link href="https://cskwrd.github.io/eleventy-base-blog/blog/posts/automatic-resume-engine/" />
    <updated>2023-06-01T00:00:00Z</updated>
    <id>https://cskwrd.github.io/eleventy-base-blog/blog/posts/automatic-resume-engine/</id>
    <content type="html">&lt;p&gt;I want to share my workflow for maintaining a resume in a repository hosted on GitHub. I will cover my motivation for doing it this way, my process, the important design decisions I have made up to this point, and finally some improvements that could be interesting projects to work on.&lt;/p&gt;
&lt;h2 id=&quot;the-motivation&quot;&gt;The Motivation&lt;/h2&gt;
&lt;p&gt;When applying for jobs, it&#39;s common to receive advice along the lines of &amp;quot;tailor your resume to the job posting.&amp;quot; While good advice, it can be quite a chore maintaining multiple versions, tracking edits, and keeping various details in sync. Similarly, a resume that you might use for an online application might not be suitable for a real, live human.&lt;/p&gt;
&lt;p&gt;For the longest time, I maintained my resume using Microsoft Word. It worked. I was able to edit the document and print out or save it as a PDF. As time went on, I began to find that my resume (more importantly, the latest copy) always seemed to be on the desktop or laptop I wasn&#39;t sitting at. Not a huge deal, I would make a note and come back to it later.&lt;/p&gt;
&lt;p&gt;As the Internet and portable devices became more ubiquitous, I migrated from Microsoft Word to Google Docs. Now as long as I didn&#39;t find myself in the wilderness, up a mountain, or in a moon base, I could update my resume from any mobile device, desktop, or refrigerator with an Internet connection. Life was good, or so I thought...&lt;/p&gt;
&lt;p&gt;Remember that nonsense about tracking edits, and multiple versions? Don&#39;t worry, I won&#39;t spend too many more pixels on it. The major problem with a resume in Google Docs is version control. That&#39;s not to say it doesn&#39;t exist in Google Docs, because it most certainly does. The problem rears its ugly head when you have multiple versions and want to track changes to a set of documents at once.&lt;/p&gt;
&lt;p&gt;In Google Docs, each document has its own history. Not so handy when you want to quickly see how many different versions of your resume have the wrong verb tense because some copy pasta went bad.&lt;/p&gt;
&lt;p&gt;To bring a long story to an end, my motivation came down to growing tired of the inflexibility of a word processor, the need to present my resume in different forms, and I was looking for the opportunity to skill up with some new tech 😁.&lt;/p&gt;
&lt;h2 id=&quot;the-requirements&quot;&gt;The Requirements&lt;/h2&gt;
&lt;p&gt;Having been sufficiently motivated, I came up with a list of requirements. They are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quality version control. I want to see which versions of my resume I edited, when, and why I edited them.&lt;/li&gt;
&lt;li&gt;Separation of content from structure. I want to minimize thoughts about page breaks right in the middle of my &lt;em&gt;amazing&lt;/em&gt; accomplishments. Similarly, I want to minimize worrying about my previous work history while I&#39;m messing up page margins.&lt;/li&gt;
&lt;li&gt;Editable from any (reasonable) device. Phone, tablet, laptop, desktop, as a regular file that supports comments.&lt;/li&gt;
&lt;li&gt;Offers protections against spam, data mining, and web scraping. The idea is that this repository containing all of this personal information will be publicly available. I don&#39;t want things like my phone number just hanging out where a bot can find it.&lt;/li&gt;
&lt;li&gt;Automatic conversion of resume data into a resume document. I don&#39;t want to be required to align the sun, moon, and stars just to get a PDF out of the system.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;the-process&quot;&gt;The Process&lt;/h2&gt;
&lt;p&gt;I spent quite some time on designing the system I have put in place. I knew for sure that I would use Git for version control. It&#39;s a tool that I (like many) am familiar with. It is usable on really any platform as well, so it seems like a good fit. Git is rather flexible too. Having been brought into this world to support the Linux project, Git has a great track record for supporting numerous use cases.&lt;/p&gt;
&lt;p&gt;With version control out of the way, I moved onto tackling the separating the content from the document structure/layout. For a while I thought that &lt;a href=&quot;https://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt; would be the ideal solution, while I hoped it would be &lt;a href=&quot;https://github.github.com/gfm/&quot;&gt;GitHub flavored Markdown&lt;/a&gt;. LaTeX has several obstacles, however. It isn&#39;t super easy to set up, requires substantial compute resources (namely disk space), and you have to mix your data with the layout. Thankfully, &lt;code&gt;.tex&lt;/code&gt; files are plain text documents so a working LaTeX installation wouldn&#39;t be a requirement to edit, however. Markdown was another option I originally considered. It put up similar obstacles. While there is no real set up or (direct) installation required to use Markdown, you still have to mix data and layout. Additionally, Markdown is not really suited to represent complex data structures. There isn&#39;t a straightforward way to represent a skill or work detail in a way other than using headers or tables to group data together. At this point, I knew I would need some tool that would let me specify or otherwise &amp;quot;mark up&amp;quot; objects. This left me with 3 options, in my mind. &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;TOML&lt;/code&gt;, &lt;code&gt;YAML&lt;/code&gt;. I explored &lt;code&gt;JSON&lt;/code&gt; (&lt;a href=&quot;https://jsonresume.org/&quot;&gt;JSON Resume&lt;/a&gt;, specifically) quite extensively. &lt;code&gt;JSON Resume&lt;/code&gt; was nice in the fact that &lt;code&gt;JSON&lt;/code&gt; supports the specification of a schema, but it falls short when trying to include comments in the JSON itself. I eventually settled on &lt;code&gt;TOML&lt;/code&gt;. So far, &lt;code&gt;TOML&lt;/code&gt; has worked pretty well. The &lt;a href=&quot;https://toml.io/&quot;&gt;TOML specification&lt;/a&gt; is clear and easy to understand, meaning that getting comfortable with the syntax was a 🍰.&lt;/p&gt;
&lt;p&gt;Now that the data is separated from the layout, I turned my attention to protecting the data. The choice here was obvious to me. I would use &lt;a href=&quot;https://docs.ansible.com/ansible/latest/vault_guide/index.html&quot;&gt;Ansible vault&lt;/a&gt;. If you are unfamiliar with the tool, it takes a file and a password as input, and outputs a file with an AES encrypted blob as its content. This allows me to commit encrypted versions of my resume data to my repository and decrypt them as needed to make edits or generate resumes based on the decrypted data. No spam for me, hehe 😁! Encrypting these files in this way does have the drawback of only being able to edit the files in places where Ansible runs (in order to decrypt the files), sadly, but for platforms where Ansible isn&#39;t available directly, SSH is generally an option.&lt;/p&gt;
&lt;p&gt;The last requirement is automation. This was another easy choice. I am committing everything in an encrypted form, to a Git repository, so I went with &lt;a href=&quot;https://docs.github.com/en/actions&quot;&gt;GitHub Actions&lt;/a&gt;. GitHub Actions let me automatically run a series of tasks when I change any of my &lt;code&gt;TOML&lt;/code&gt; files. I also have a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https://github.com/cskwrd/quick-send-action&quot;&gt;custom action&lt;/a&gt; that sends me a copy of the generated resumes via email, so I don&#39;t have to host the PDFs, in decrypted form, in the repository itself.&lt;/p&gt;
&lt;p&gt;With the basics in place, I can begin walking through the editing process.&lt;/p&gt;
&lt;h3 id=&quot;step-1-edit-resume&quot;&gt;Step 1: Edit resume&lt;/h3&gt;
&lt;p&gt;This part is straight forward. A single command is all you need: &lt;code&gt;ansible-vault edit ./resume.vault.toml --ask-vault-pass&lt;/code&gt;. Upon executing the command, you are prompted for the decryption password (I&#39;ve saved a nice long password in my password manager), the file is decrypted, and then opened in the default editor. After making my desired edits (ex: Adding Ansible to my list of skills), I save the file and close the editor. After the editor closes, Ansible re-encrypts the file&#39;s contents automatically. The only thing left to do is commit the edits, and push them to GitHub.&lt;/p&gt;
&lt;h3 id=&quot;step-2-wait&quot;&gt;Step 2: Wait... ⏱️&lt;/h3&gt;
&lt;p&gt;I know the heading of this section makes it sound like this is a HUGE time sink. It isn&#39;t. This is the automation step. I have configured a GitHub Actions workflow to be triggered by any push to my repository that contains changes to a file with the &lt;code&gt;.toml&lt;/code&gt; extension. Once triggered, the following steps are taken:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The repository is cloned to the GitHub Action runner.&lt;/li&gt;
&lt;li&gt;Using an Ansible vault password stored in a GitHub repository secret, each resume is decrypted and converted from &lt;code&gt;TOML&lt;/code&gt; to &lt;code&gt;JSON&lt;/code&gt; using &lt;a href=&quot;https://github.com/sclevine/yj&quot;&gt;yj&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;JSON&lt;/code&gt; files are then converted to PDFs using the &lt;code&gt;JSON Resume&lt;/code&gt; project&#39;s &lt;a href=&quot;https://www.npmjs.com/package/resume-cli&quot;&gt;resume-cli tool&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The resulting PDFs are shipped off (to me) using my &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https://github.com/cskwrd/quick-send-action&quot;&gt;QuickSend File Transfer&lt;/a&gt; action, via email.&lt;/li&gt;
&lt;li&gt;Finally, the &lt;code&gt;JSON&lt;/code&gt; files are encrypted with Ansible vault and committed to the repository.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You likely noticed that I mentioned that I convert the &lt;code&gt;TOML&lt;/code&gt; to &lt;code&gt;JSON&lt;/code&gt; in the workflow outlined above. I skipped over this before, but the purpose for this is simple. &lt;code&gt;TOML&lt;/code&gt; is easier to both read and edit compared to &lt;code&gt;JSON&lt;/code&gt;, but there is a considerable amount of work and tooling done to make &lt;code&gt;JSON Resume&lt;/code&gt; relevent. In this case, I am able to use the best of both worlds by writing my &lt;code&gt;TOML&lt;/code&gt; files in a way that converts to a valid &lt;code&gt;JSON Resume&lt;/code&gt;, and then use tooling for that community to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https://github.com/cskwrd/jsonresume-theme-stackoverflow/&quot;&gt;style&lt;/a&gt; and generate my resume. Lastly, I commit the &lt;code&gt;JSON&lt;/code&gt; representation of my resume, so I can trigger the GitHub Action workflow manually when I need a new copy of my resume. This saves me from trying to hunt down the files from a previous generation.&lt;/p&gt;
&lt;h3 id=&quot;step-3-get-hired&quot;&gt;Step 3: Get Hired!&lt;/h3&gt;
&lt;p&gt;Okay, this really isn&#39;t a step, but only two steps felt too easy!&lt;/p&gt;
&lt;h3 id=&quot;future-plans&quot;&gt;Future Plans&lt;/h3&gt;
&lt;p&gt;Throughout this process, I focussed on getting a complete solution in order to fight the dreaded &lt;!-- This definition joke won&#39;t work on mobile I&#39;m afraid --&gt;&lt;dfn id=&quot;feature-creep&quot;&gt;&lt;abbr title=&quot;A scary amorphous blob monster responsible for the destruction of an uncountable number of projects&quot;&gt;feature creep&lt;/abbr&gt;&lt;/dfn&gt;. There are definitely some features that would be nice to have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Updating this blog with a web version of my resume when it changes.&lt;/li&gt;
&lt;li&gt;Instead of sending every generated resume to me (and then I in turn forward it on), being able to specify a recipient and the PDF being sent directly.&lt;/li&gt;
&lt;li&gt;Using commit hooks in a clever way to allow resume edits online.&lt;/li&gt;
&lt;li&gt;Integrate &lt;a href=&quot;https://languagetool.org/&quot;&gt;LanguageTool&lt;/a&gt; or &lt;a href=&quot;https://www.grammarly.com/&quot;&gt;Grammarly&lt;/a&gt; to check spelling and grammar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These might be interesting features to work on in the future, as well as, provide good opportunities to skill up!&lt;/p&gt;
&lt;p&gt;Thanks for reading! If you have any thoughts or questions about this post, feel free to start a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https://github.com/cskwrd/cskwrd.github.io/discussions&quot;&gt;discussion&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Hello World!</title>
    <link href="https://cskwrd.github.io/eleventy-base-blog/blog/posts/hello-world/" />
    <updated>2023-05-04T00:00:00Z</updated>
    <id>https://cskwrd.github.io/eleventy-base-blog/blog/posts/hello-world/</id>
    <content type="html">&lt;p&gt;Hello, World! This marks the start of my blog. To start it will be more like brain dumps of information I am working through at the moment. Notes to myself, really.&lt;/p&gt;
&lt;p&gt;May the fourth be with you!&lt;/p&gt;
</content>
  </entry>
</feed>